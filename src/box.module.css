html {
  font-size: 16px;
  line-height: 1.2;
}

body {
  margin: 0;
  line-height: var(--lineHeight);
  font-size: var(--fontSize);
}

.box {
  display: block;
  border: 0 solid #000;
  margin: 0;
  padding: 0;
  border-color: var(--borderColor);
}

/* display */
.inlinetrue,
.hovertrue:hover .inlinehtrue {
  display: inline-block;
}

@each $display in none, block, inline-block, flex, inline-flex, grid {
  .display$(display),
  .hovertrue:hover .displayh$(display) {
    display: $display;
  }
}

/* position */
@each $position in static, relative, absolute, fixed, sticky {
  .position$(position),
  .hovertrue:hover .positionh$(position) {
    position: $position;
  }
}

/*  width, height */
@each $styleProp, $style, $fitScreenValue in (width, height, minWidth, minHeight, maxWidth, maxHeight),
  (width, height, min-width, min-height, max-width, max-height), (100vw, 100vh, 100vw, 100vh, 100vw, 100vh)
{
  .$(styleProp)fit,
  .hovertrue:hover .$(styleProp)hfit {
    $(style): 100%;
  }

  .$(styleProp)fit-screen,
  .hovertrue:hover .$(styleProp)hfit-screen {
    $(style): $fitScreenValue;
  }

  @each $otherSize in auto, fit-content, max-content, min-content {
    .$(styleProp)$(otherSize),
    .hovertrue:hover .$(styleProp)h$(otherSize) {
      $(style): $otherSize;
    }
  }
}

/* inset */
@each $size in $sizes {
  .inset$(size),
  .hovertrue:hover .inseth$(size) {
    inset: calc($size * $sizeMultiplier * 1rem);
  }
}

/* top, right, bottom, left */
@each $side in (top, right, bottom, left) {
  @each $size in $sizes {
    .$(side)$(size),
    .hovertrue:hover .$(side)h$(size) {
      $(side): calc($size * $sizeMultiplier * 1rem);
    }
  }
}

/* margin, padding */
@each $dimmension, $dimmensionName in (m, p), (margin, padding) {
  @each $size in $sizes {
    .$(dimmensionName)$(size),
    .$(dimmension)$(size),
    .hovertrue:hover .$(dimmensionName)h$(size),
    .hovertrue:hover .$(dimmension)h$(size) {
      $(dimmensionName): calc($size * $sizeMultiplier * 1rem);
    }
  }
  .$(dimmensionName)auto,
  .$(dimmension)auto,
  .hovertrue:hover .$(dimmensionName)hauto,
  .hovertrue:hover .$(dimmension)hauto {
    $(dimmensionName): auto;
  }

  @each $size in $sizes {
    .$(dimmensionName)Horizontal$(size),
    .$(dimmension)x$(size),
    .hovertrue:hover .$(dimmensionName)Horizontalh$(size),
    .hovertrue:hover .$(dimmension)xh$(size) {
      $(dimmensionName)-inline: calc($size * $sizeMultiplier * 1rem);
    }

    .$(dimmensionName)Vertical$(size),
    .$(dimmension)y$(size),
    .hovertrue:hover .$(dimmensionName)Verticalh$(size),
    .hovertrue:hover .$(dimmension)yh$(size) {
      $(dimmensionName)-block: calc($size * $sizeMultiplier * 1rem);
    }
  }
  .$(dimmensionName)Horizontalauto,
  .$(dimmension)xauto,
  .hovertrue:hover .$(dimmensionName)Horizontalhauto,
  .hovertrue:hover .$(dimmension)xhauto {
    $(dimmensionName)-inline: auto;
  }

  .$(dimmensionName)Verticalauto,
  .$(dimmension)yauto,
  .hovertrue:hover .$(dimmensionName)Verticalhauto,
  .hovertrue:hover .$(dimmension)yhauto {
    $(dimmensionName)-block: auto;
  }

  @each $side, $sideName, $sideCapitalizedName in (t, r, b, l), (top, right, bottom, left), (Top, Right, Bottom, Left) {
    @each $size in $sizes {
      .$(dimmensionName)$(sideCapitalizedName)$(size),
      .$(dimmension)$(side)$(size),
      .hovertrue:hover .$(dimmensionName)$(sideCapitalizedName)h$(size),
      .hovertrue:hover .$(dimmension)$(side)h$(size) {
        $(dimmensionName)-$(sideName): calc($size * $sizeMultiplier * 1rem);
      }
    }
    .$(dimmensionName)$(sideCapitalizedName)auto,
    .$(dimmension)$(side)auto,
    .hovertrue:hover .$(dimmensionName)$(sideCapitalizedName)hauto,
    .hovertrue:hover .$(dimmension)$(side)hauto {
      $(dimmensionName)-$(sideName): auto;
    }
  }
}

/* border-width */
@each $size in $sizes {
  .border$(size),
  .b$(size),
  .hovertrue:hover .borderh$(size),
  .hovertrue:hover .bh$(size) {
    border-width: calc($size * 1px);
  }
}
@each $size in $sizes {
  .borderHorizontal$(size),
  .bx$(size),
  .hovertrue:hover .borderHorizontalh$(size),
  .hovertrue:hover .bxh$(size) {
    border-inline-width: calc($size * 1px);
  }

  .borderVertical$(size),
  .by$(size),
  .hovertrue:hover .borderVerticalh$(size),
  .hovertrue:hover .byh$(size) {
    border-block-width: calc($size * 1px);
  }
}
@each $size in $sizes {
  @each $side, $sideName, $sideCapitalizedName in (t, r, b, l), (top, right, bottom, left), (Top, Right, Bottom, Left) {
    .border$(sideCapitalizedName)$(size),
    .b$(side)$(size),
    .hovertrue:hover .border$(sideCapitalizedName)h$(size),
    .hovertrue:hover .b$(side)h$(size) {
      border-$(sideName)-width: calc($size * 1px);
    }
  }
}

/* border-style */
@each $borderStyle in solid, dashed, dotted, double {
  .borderStyle$(borderStyle),
  .bStyle$(borderStyle),
  .hovertrue:hover .borderStyleh$(borderStyle),
  .hovertrue:hover .bStyleh$(borderStyle) {
    border-style: $borderStyle;
  }
}

/* border radius */
@each $size in $sizes {
  .borderRadius$(size),
  .bRadius$(size),
  .hovertrue:hover .borderRadiush$(size),
  .hovertrue:hover .bRadiush$(size) {
    border-radius: calc($size * $sizeMultiplier * 1rem);
  }
}
@each $size in $sizes {
  .borderRadiusTop$(size),
  .bRadiusTop$(size),
  .hovertrue:hover .borderRadiusToph$(size),
  .hovertrue:hover .bRadiusToph$(size) {
    border-top-left-radius: calc($size * $sizeMultiplier * 1rem);
    border-top-right-radius: calc($size * $sizeMultiplier * 1rem);
  }
}
@each $size in $sizes {
  .borderRadiusRight$(size),
  .bRadiusRight$(size),
  .hovertrue:hover .borderRadiusRighth$(size),
  .hovertrue:hover .bRadiusRighth$(size) {
    border-top-right-radius: calc($size * $sizeMultiplier * 1rem);
    border-bottom-right-radius: calc($size * $sizeMultiplier * 1rem);
  }
}
@each $size in $sizes {
  .borderRadiusBottom$(size),
  .bRadiusBottom$(size),
  .hovertrue:hover .borderRadiusBottomh$(size),
  .hovertrue:hover .bRadiusBottomh$(size) {
    border-bottom-left-radius: calc($size * $sizeMultiplier * 1rem);
    border-bottom-right-radius: calc($size * $sizeMultiplier * 1rem);
  }
}
@each $size in $sizes {
  .borderRadiusLeft$(size),
  .bRadiusLeft$(size),
  .hovertrue:hover .borderRadiusLefth$(size),
  .hovertrue:hover .bRadiusLefth$(size) {
    border-top-left-radius: calc($size * $sizeMultiplier * 1rem);
    border-bottom-left-radius: calc($size * $sizeMultiplier * 1rem);
  }
}
@each $size in $sizes {
  @each $sideY, $sideNameY in (top, bottom), (Top, Bottom) {
    @each $sideX, $sideNameX in (right, left), (Right, Left) {
      .borderRadius$(sideNameY)$(sideNameX)$(size),
      .bRadius$(sideNameY)$(sideNameX)$(size),
      .hovertrue:hover .borderRadius$(sideNameY)$(sideNameX)h$(size),
      .hovertrue:hover .bRadius$(sideNameY)$(sideNameX)h$(size) {
        border-$(sideY)-$(sideX)-radius: calc($size * $sizeMultiplier * 1rem);
      }
    }
  }
}

/* colors (color, bgColor, borderColor)  */
@each $color in $colors {
  .color$(color),
  .hovertrue:hover .colorh$(color) {
    color: var(--$(color));
  }

  .colorHover$(color):hover,
  .hovertrue:hover .colorHoverh$(color):hover {
    color: var(--$(color));
  }

  .backgroundColor$(color),
  .bgColor$(color),
  .hovertrue:hover .backgroundColorh$(color),
  .hovertrue:hover .bgColorh$(color) {
    background-color: var(--$(color));
  }

  .backgroundColorHover$(color):hover,
  .bgColorHover$(color):hover,
  .hovertrue:hover .backgroundColorHoverh$(color):hover,
  .hovertrue:hover .bgColorHoverh$(color):hover {
    background-color: var(--$(color));
  }

  .borderColor$(color),
  .bColor$(color),
  .hovertrue:hover .borderColorh$(color),
  .hovertrue:hover .bColorh$(color) {
    border-color: var(--$(color));
  }

  .hovertrue:hover .borderColorHoverh$(color):hover,
  .hovertrue:hover .bColorHoverh$(color):hover {
    border-color: var(--$(color));
  }
}

/* cursor */
@each $cursor in $cursors {
  .cursor$(cursor),
  .hovertrue:hover .cursorh$(cursor) {
    cursor: $cursor;
  }
}

/* z-index */
@each $size in $sizes {
  .zIndex$(size),
  .hovertrue:hover .zIndexh$(size) {
    z-index: $size;
  }
}

/* overflow */
@each $overflow in auto, hidden, scroll, visible {
  .overflow$(overflow),
  .hovertrue:hover .overflowh$(overflow) {
    overflow: $overflow;
  }

  .overflowX$(overflow),
  .hovertrue:hover .overflowXh$(overflow) {
    overflow-x: $overflow;
  }

  .overflowY$(overflow),
  .hovertrue:hover .overflowYh$(overflow) {
    overflow-y: $overflow;
  }
}

/* opacity */
@each $opacity in 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 {
  .opacity$(opacity),
  .hovertrue:hover .opacityh$(opacity) {
    opacity: calc($opacity / 100);
  }
}

/* font-size */
@each $fontSize in $fontSizes {
  .fontSize$(fontSize),
  .hovertrue:hover .fontSizeh$(fontSize) {
    font-size: calc($fontSize * 1px);
  }

  .lineHeight$(fontSize),
  .hovertrue:hover .lineHeighth$(fontSize) {
    line-height: calc($fontSize * 1px);
  }
}

/* font-weight */
@each $fontWeight in 100, 200, 300, 400, 500, 600, 700, 800, 900 {
  .fontWeight$(fontWeight),
  .hovertrue:hover .fontWeighth$(fontWeight) {
    font-weight: $fontWeight;
  }
}

/* letter-spacing */
@each $size in $sizes {
  .letterSpacing$(size),
  .hovertrue:hover .letterSpacingh$(size) {
    letter-spacing: calc($size * 1px);
  }
}

/* text-decoration */
@each $textDecoration in none, underline {
  .textDecoration$(textDecoration),
  .hovertrue:hover .textDecorationh$(textDecoration) {
    text-decoration: $textDecoration;
  }
}

/* text-align */
@each $textAlign in left, right, center {
  .textAlign$(textAlign),
  .hovertrue:hover .textAlignh$(textAlign) {
    text-align: $textAlign;
  }
}

/* text-transform */
@each $textTransform in none, capitalize, lowercase, uppercase {
  .textTransform$(textTransform),
  .hovertrue:hover .textTransformh$(textTransform) {
    text-transform: $textTransform;
  }
}

/* flex-wrap */
@each $flexWrap in nowrap, wrap, wrap-reverse {
  .flexWrap$(flexWrap),
  .hovertrue:hover .flexWraph$(flexWrap) {
    flex-wrap: $flexWrap;
  }
}

/* justify-content */
@each $justifyContent in start, end, flex-start, flex-end, center, left, right, space-between, space-around, space-evenly, stretch {
  .justifyContent$(justifyContent),
  .hovertrue:hover .justifyContenth$(justifyContent) {
    justify-content: $justifyContent;
  }
}

/* align-items */
@each $alignItems in stretch, flex-start, flex-end, center, baseline, start, end, self-start, self-end {
  .alignItems$(alignItems),
  .hovertrue:hover .alignItemsh$(alignItems) {
    align-items: $alignItems;
  }
}

/* align-content */
@each $alignContent in flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, start, end, baseline {
  .alignContent$(alignContent),
  .hovertrue:hover .alignContenth$(alignContent) {
    align-content: $alignContent;
  }
}

/* flex: 1 */
.flex1true,
.hovertrue:hover .flex1htrue {
  flex: 1;
}

/* flex-direction */
@each $direction in row, row-reverse, column, column-reverse {
  .direction$(direction),
  .hovertrue:hover .directionh$(direction) {
    flex-direction: $direction;
  }
}

/* gap, row-gap, column-gap, order, flex-grow, flex-shrink */
@each $size in $sizes {
  .gap$(size),
  .hovertrue:hover .gaph$(size) {
    gap: calc($size * $sizeMultiplier * 1rem);
  }
  .rowGap$(size),
  .hovertrue:hover .rowGaph$(size) {
    row-gap: calc($size * $sizeMultiplier * 1rem);
  }
  .columnGap$(size),
  .hovertrue:hover .columnGaph$(size) {
    column-gap: calc($size * $sizeMultiplier * 1rem);
  }
  .order$(size),
  .hovertrue:hover .orderh$(size) {
    order: $size;
  }
  .flexGrow$(size),
  .hovertrue:hover .flexGrowh$(size) {
    flex-grow: $size;
  }
  .flexShrink$(size),
  .hovertrue:hover .flexShrinkh$(size) {
    flex-shrink: $size;
  }
}

/* alignSelf */
@each $alignSelf in auto, flex-start, flex-end, center, baseline, stretch {
  .alignSelf$(alignSelf),
  .hovertrue:hover .alignSelfh$(alignSelf) {
    align-self: $alignSelf;
  }
}
