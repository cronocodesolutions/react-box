html {
  font-size: 16px;
  line-height: 1.2;
}

body {
  margin: 0;
  line-height: var(--lineHeight);
  font-size: var(--fontSize);
}

.box {
  display: block;
  border: 0 solid #000;
  margin: 0;
  padding: 0;
  border-color: var(--borderColor);
}

/* display */
@each $display in none, block, inline-block, flex, inline-flex, grid {
  .display$(display) {
    display: $display;
  }
}

/* position */
@each $position in static, relative, absolute, fixed, sticky {
  .position$(position) {
    position: $position;
  }
}

/*  width, height */
@each $styleProp, $style, $fitScreenValue in (width, height, minWidth, minHeight, maxWidth, maxHeight),
  (width, height, min-width, min-height, max-width, max-height), (100vw, 100vh, 100vw, 100vh, 100vw, 100vh)
{
  .$(styleProp)fit {
    $(style): 100%;
  }

  .$(styleProp)fit-screen {
    $(style): $fitScreenValue;
  }

  @each $otherSize in auto, fit-content, max-content, min-content {
    .$(styleProp)$(otherSize) {
      $(style): $otherSize;
    }
  }
}

/* top, right, bottom, left */
@each $side in (top, right, bottom, left) {
  @each $size in $sizes {
    .$(side)$(size) {
      $(side): calc($size * $sizeMultiplier * 1rem);
    }
  }
}

/* margin, padding */
@each $dimmension, $dimmensionName in (m, p), (margin, padding) {
  @each $size in $sizes {
    .$(dimmensionName)$(size),
    .$(dimmension)$(size) {
      $(dimmensionName): calc($size * $sizeMultiplier * 1rem);
    }
  }

  @each $size in $sizes {
    .$(dimmensionName)Horizontal$(size),
    .$(dimmension)x$(size) {
      $(dimmensionName)-left: calc($size * $sizeMultiplier * 1rem);
      $(dimmensionName)-right: calc($size * $sizeMultiplier * 1rem);
    }

    .$(dimmensionName)Vertical$(size),
    .$(dimmension)y$(size) {
      $(dimmensionName)-top: calc($size * $sizeMultiplier * 1rem);
      $(dimmensionName)-bottom: calc($size * $sizeMultiplier * 1rem);
    }
  }

  @each $size in $sizes {
    @each $side, $sideName, $sideCapitalizedName in (t, r, b, l), (top, right, bottom, left), (Top, Right, Bottom, Left) {
      .$(dimmensionName)$(sideCapitalizedName)$(size),
      .$(dimmension)$(side)$(size) {
        $(dimmensionName)-$(sideName): calc($size * $sizeMultiplier * 1rem);
      }
    }
  }
}

/* border-width */
@each $size in $sizes {
  .border$(size),
  .b$(size) {
    border-width: calc($size * 1px);
  }
}
@each $size in $sizes {
  .borderHorizontal$(size),
  .bx$(size) {
    border-left-width: calc($size * 1px);
    border-right-width: calc($size * 1px);
  }

  .borderVertical$(size),
  .by$(size) {
    border-top-width: calc($size * 1px);
    border-bottom-width: calc($size * 1px);
  }
}
@each $size in $sizes {
  @each $side, $sideName, $sideCapitalizedName in (t, r, b, l), (top, right, bottom, left), (Top, Right, Bottom, Left) {
    .border$(sideCapitalizedName)$(size),
    .b$(side)$(size) {
      border-$(sideName)-width: calc($size * 1px);
    }
  }
}

/* border-style */
@each $borderStyle in solid, dashed, dotted, double {
  .borderStyle$(borderStyle),
  .bStyle$(borderStyle) {
    border-style: $borderStyle;
  }
}

/* border radius */
@each $size in $sizes {
  .borderRadius$(size),
  .bRadius$(size) {
    border-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  .borderRadiusTop$(size),
  .bRadiusTop$(size) {
    border-top-left-radius: calc($size / 4 * 1rem);
    border-top-right-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  .borderRadiusRight$(size),
  .bRadiusRight$(size) {
    border-top-right-radius: calc($size / 4 * 1rem);
    border-bottom-right-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  .borderRadiusBottom$(size),
  .bRadiusBottom$(size) {
    border-bottom-left-radius: calc($size / 4 * 1rem);
    border-bottom-right-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  .borderRadiusLeft$(size),
  .bRadiusLeft$(size) {
    border-top-left-radius: calc($size / 4 * 1rem);
    border-bottom-left-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  @each $sideY, $sideNameY in (top, bottom), (Top, Bottom) {
    @each $sideX, $sideNameX in (right, left), (Right, Left) {
      .borderRadius$(sideNameY)$(sideNameX)$(size),
      .bRadius$(sideNameY)$(sideNameX)$(size) {
        border-$(sideY)-$(sideX)-radius: calc($size / 4 * 1rem);
      }
    }
  }
}

/* colors (color, bgColor, borderColor)  */
@each $color in $colors {
  .color$(color) {
    color: var(--$(color));
  }

  .colorHover$(color):hover {
    color: var(--$(color));
  }

  .backgroundColor$(color),
  .bgColor$(color) {
    background-color: var(--$(color));
  }

  .backgroundColorHover$(color):hover,
  .bgColorHover$(color):hover {
    background-color: var(--$(color));
  }

  .borderColor$(color),
  .bColor$(color) {
    border-color: var(--$(color));
  }

  .borderColorHover$(color):hover,
  .bColorHover$(color):hover {
    border-color: var(--$(color));
  }
}

/* line-height */
@each $size in $sizes {
  .lineHeight$(size) {
    line-height: calc($size * 0.3);
  }
}

/* cursor */
@each $cursor in $cursors {
  .cursor$(cursor) {
    cursor: $cursor;
  }
}

/* z-index */
@each $size in $sizes {
  .zIndex$(size) {
    z-index: $size;
  }
}

/* overflow */
@each $overflow in auto, hidden, scroll, visible {
  .overflow$(overflow) {
    overflow: $overflow;
  }

  .overflowX$(overflow) {
    overflow-x: $overflow;
  }

  .overflowY$(overflow) {
    overflow-y: $overflow;
  }
}

/* opacity */
@each $opacity in 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 {
  .opacity$(opacity) {
    opacity: calc($opacity / 100);
  }
}

/* font-size */
@each $fontSize in $fontSizes {
  .fontSize$(fontSize) {
    font-size: calc($fontSize * 1px);
  }
}

/* font-weight */
@each $fontWeight in 100, 200, 300, 400, 500, 600, 700, 800, 900 {
  .fontWeight$(fontWeight) {
    font-weight: $fontWeight;
  }
}

/* text-decoration */
@each $textDecoration in none, underline {
  .textDecoration$(textDecoration) {
    text-decoration: $textDecoration;
  }
}

/* text-align */
@each $textAlign in left, right, center {
  .textAlign$(textAlign) {
    text-align: $textAlign;
  }
}

/* text-transform */
@each $textTransform in none, capitalize, lowercase, uppercase {
  .textTransform$(textTransform) {
    text-transform: $textTransform;
  }
}

/* flex-wrap */
@each $flexWrap in nowrap, wrap, wrap-reverse {
  .flexWrap$(flexWrap) {
    flex-wrap: $flexWrap;
  }
}

/* justify-content */
@each $justifyContent in start, end, flex-start, flex-end, center, left, right, space-between, space-around, space-evenly, stretch {
  .justifyContent$(justifyContent) {
    justify-content: $justifyContent;
  }
}

/* align-items */
@each $alignItems in stretch, flex-start, flex-end, center, baseline, start, end, self-start, self-end {
  .alignItems$(alignItems) {
    align-items: $alignItems;
  }
}

/* align-content */
@each $alignContent in flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, start, end, baseline {
  .alignContent$(alignContent) {
    align-content: $alignContent;
  }
}

/* flex: 1 */
.flex1true {
  flex: 1;
}

/* direction */
@each $direction in row, row-reverse, column, column-reverse {
  .direction$(direction) {
    direction: $direction;
  }
}

/* gap, row-gap, column-gap, order, flex-grow, flex-shrink */
@each $size in $sizes {
  .gap$(size) {
    gap: calc($size * $sizeMultiplier * 1rem);
  }
  .rowGap$(size) {
    row-gap: calc($size * $sizeMultiplier * 1rem);
  }
  .columnGap$(size) {
    column-gap: calc($size * $sizeMultiplier * 1rem);
  }
  .order$(size) {
    order: $size;
  }
  .flexGrow$(size) {
    flex-grow: $size;
  }
  .flexShrink$(size) {
    flex-shrink: $size;
  }
}

/* alignSelf */
@each $alignSelf in auto, flex-start, flex-end, center, baseline, stretch {
  .alignSelf$(alignSelf) {
    align-self: $alignSelf;
  }
}
