body {
  font-size: 16px;
}

.box {
  display: inline-block;
  height: fit-content;
  border: 0 solid inherit;
  font-family: inherit;
  font-size: inherit;
  margin: 0;
  padding: 0;
  line-height: 1.2;
}

/* display */
@each $display in none, block, inline-block, flex, inline-flex, grid {
  .display$(display) {
    display: $display;
  }
}

/* position */
@each $position in static, relative, absolute, fixed, sticky {
  .position$(position) {
    position: $position;
  }
}

/* top, right, bottom, left */
@each $side in (top, right, bottom, left) {
  @each $size in $sizes {
    .$(side)$(size) {
      $(side): calc($size * $sizeMultiplier * 1rem);
    }
  }
}

/* margin, padding */
@each $dimmension, $dimmensionName in (m, p), (margin, padding) {
  @each $size in $sizes {
    .$(dimmension)$(size) {
      $(dimmensionName): calc($size * $sizeMultiplier * 1rem);
    }
  }

  @each $size in $sizes {
    .$(dimmension)x$(size) {
      $(dimmensionName)-left: calc($size * $sizeMultiplier * 1rem);
      $(dimmensionName)-right: calc($size * $sizeMultiplier * 1rem);
    }

    .$(dimmension)y$(size) {
      $(dimmensionName)-top: calc($size * $sizeMultiplier * 1rem);
      $(dimmensionName)-bottom: calc($size * $sizeMultiplier * 1rem);
    }
  }

  @each $size in $sizes {
    @each $side, $sideName in (t, r, b, l), (top, right, bottom, left) {
      .$(dimmension)$(side)$(size) {
        $(dimmensionName)-$(sideName): calc($size * $sizeMultiplier * 1rem);
      }
    }
  }
}

/* border-width */
@each $size in $sizes {
  .b$(size) {
    border-width: calc($size * 1px);
  }
}

@each $size in $sizes {
  .bx$(size) {
    border-left-width: calc($size * 1px);
    border-right-width: calc($size * 1px);
  }

  .by$(size) {
    border-top-width: calc($size * 1px);
    border-bottom-width: calc($size * 1px);
  }
}

@each $size in $sizes {
  @each $side, $sideName in (t, r, b, l), (top, right, bottom, left) {
    .b$(side)$(size) {
      border-$(sideName)-width: calc($size * 1px);
    }
  }
}

/* border-style */
@each $borderStyle in solid, dashed, dotted, double {
  .bStyle$(borderStyle) {
    border-style: $borderStyle;
  }
}

/* border radius */
@each $size in $sizes {
  .bRadius$(size) {
    border-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  .bRadiusTop$(size) {
    border-top-left-radius: calc($size / 4 * 1rem);
    border-top-right-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  .bRadiusRight$(size) {
    border-top-right-radius: calc($size / 4 * 1rem);
    border-bottom-right-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  .bRadiusBottom$(size) {
    border-bottom-left-radius: calc($size / 4 * 1rem);
    border-bottom-right-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  .bRadiusLeft$(size) {
    border-top-left-radius: calc($size / 4 * 1rem);
    border-bottom-left-radius: calc($size / 4 * 1rem);
  }
}
@each $size in $sizes {
  @each $sideY, $sideNameY in (top, bottom), (Top, Bottom) {
    @each $sideX, $sideNameX in (right, left), (Right, Left) {
      .bRadius$(sideNameY)$(sideNameX)$(size) {
        border-$(sideY)-$(sideX)-radius: calc($size / 4 * 1rem);
      }
    }
  }
}

/* colors (color, bgColor, borderColor)  */
@each $color in $colors {
  .color$(color) {
    color: var(--$(color));
  }

  .colorHover$(color):hover {
    color: var(--$(color));
  }

  .bgColor$(color) {
    background-color: var(--$(color));
  }

  .bgColorHover$(color):hover {
    background-color: var(--$(color));
  }

  .bColor$(color) {
    border-color: var(--$(color));
  }

  .bColorHover$(color):hover {
    border-color: var(--$(color));
  }
}

/* line-height */
@each $size in $sizes {
  .lineHeight$(size) {
    line-height: calc($size * 0.3);
  }
}

/* cursor */
@each $cursor in $cursors {
  .cursor$(cursor) {
    cursor: $cursor;
  }
}

/* z-index */
@each $size in $sizes {
  .zIndex$(size) {
    z-index: $size;
  }
}

/* overflow */
@each $overflow in auto, hidden, scroll, visible {
  .overflow$(overflow) {
    overflow: $overflow;
  }

  .overflowX$(overflow) {
    overflow-x: $overflow;
  }

  .overflowY$(overflow) {
    overflow-y: $overflow;
  }
}

/* opacity */
@each $opacity in 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 {
  .opacity$(opacity) {
    opacity: calc($(opacity) / 100);
  }
}

/* font-size */
@each $fontSize in $fontSizes {
  .fontSize$(fontSize) {
    font-size: calc($fontSize * 1px);
  }
}

/* font-weight */
@each $fontWeight in 100, 200, 300, 400, 500, 600, 700, 800, 900 {
  .fontWeight$(fontWeight) {
    font-weight: $fontWeight;
  }
}

/* text-decoration */
@each $textDecoration in none, underline {
  .textDecoration$(textDecoration) {
    text-decoration: $textDecoration;
  }
}

@each $textAlign in left, right, center {
  .textAlign$(textAlign) {
    text-align: $textAlign;
  }
}
